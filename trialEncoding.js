// Step 1: Define the Base64 encoded string
const encodedString = `
aW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnDQoNCmNvbnN0IGluaXRpYWxMaW5rRGF0YSA9IFsNCiAgew0KICAgIHRpdGxlOiAiUmF2aSBSYXVzaGFuIG9uIExpbmtlZEluOiAjcmFkaGVrcmlzaG5hICNzb2Z0d2FyZWVuZ2luZWVyaW5nICNjb21tdW5pdHkgI25ldHdvcmtpbmcgI2pvYiB8IDMzIGNvbW1lbnRzIiwNCiAgICBkZXNjcmlwdGlvbjogIiNyYWRoZWtyaXNobmFcbkhvdyB0byBJbmNyZWFzZSBZb3VyIENoYW5jZXMgb2YgR2V0dGluZyBBc3Nlc3NtZW50IExpbmtzIG9yIEludGVydmlldyBDYWxscyA/XG5cbkkgcmVjZWl2ZWQgYSBsb3Qgb2YgbWVzc2FnZXMgcmVnYXJkaW5nIHRoaXMgc28gdGhvdWdodCB0byBtYWtlIGHigKYgfCAzMyBjb21tZW50cyBvbiBMaW5rZWRJbiIsDQogICAgZG9tYWluOiAibGlua2VkaW4uY29tIiwNCiAgICBpbWc6ICJodHRwczovL3N0YXRpYy5saWNkbi5jb20vYWVyby12MS9zYy9oL2M0NWZ5MzQ2ancwOTZ6OXBicGh5eWhkejciLA0KICAgIGZhdmljb246ICJodHRwczovL3d3dy5saW5rZWRpbi5jb20vZmF2aWNvbi5pY28iDQogIH0sDQogIHsNCiAgICB0aXRsZTogIkdyb3EgQm91bnR5OiAkMTUwIFByaXplICsgQ2hhbmNlIHRvIGJlIEZlYXR1cmVkIGF0IFNDJzI0IGZvciBXaW5uZXIgb2YgQnVzaW5lc3MtUmVsZXZhbnQgTGxhbWEgMy4yIERlbW8iLA0KICAgIGRlc2NyaXB0aW9uOiAiV2UncmUgZXhjaXRlZCB0byBhbm5vdW5jZSBhIGJvdW50eSBmb3IgaW5ub3ZhdGl2ZSwgYnVzaW5lc3MtcmVsZXZhbnQgZGVtb3MgdXNpbmcgTGxhbWEgMy4yIHBvd2VyZWQgYnkgR3JvcSEgU2hvd2Nhc2UgeW91ciBjcmVhdGl2aXR5IGFuZCB0ZWNobmljYWwgc2tpbGxzIGZvciBhIGNoYW5jZSB0byB3aW4gJDE1MCB0byB0aGUgR3JvcSBzd2FnIHN0b3JlIGFuZCBnZXQgeW91ciBkZW1vIHNob3djYXNlZCBhdCB0aGUgR3JvcSBib290aCBhdCBTQzI0ICEg8J+agCIsDQogICAgZG9tYWluOiAiZG9jcy5nb29nbGUuY29tIiwNCiAgICBpbWc6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vY3RfWGhZVHBydW5pbDJ0dXllV3BLOVR5REphWkhyRGd2VjQybE1BOUUxenZ1d2J2T3VuSHNFZXZYMmFYV1ZUdFNma1lCOUtRR0pZPXcxMjAwLWg2MzAtcCIsDQogICAgZmF2aWNvbjogImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2Zhdmljb24uaWNvIg0KICB9LA0KICB7DQogICAgdGl0bGU6ICJHaXRIdWIgLSBBbmRyZWpHYWpkb3MvbGluay1wcmV2aWV3LWdlbmVyYXRvcjogR2V0IHByZXZpZXcgZGF0YSAoYSB0aXRsZSwgZGVzY3JpcHRpb24sIGltYWdlLCBkb21haW4gbmFtZSkgZnJvbSBhIHVybC4gTGlicmFyeSB1c2VzIHB1cHBldGVlciBoZWFkbGVzcyBicm93c2VyIHRvIHNjcmFwZSB0aGUgd2ViIHNpdGUuIiwNCiAgICBkZXNjcmlwdGlvbjogIkdldCBwcmV2aWV3IGRhdGEgKGEgdGl0bGUsIGRlc2NyaXB0aW9uLCBpbWFnZSwgZG9tYWluIG5hbWUpIGZyb20gYSB1cmwuIExpYnJhcnkgdXNlcyBwdXBwZXRlZXIgaGVhZGxlc3MgYnJvd3NlciB0byBzY3JhcGUgdGhlIHdlYiBzaXRlLiAtIEFuZHJlakdhamRvcy9saW5rLXByZXZpZXctZ2VuZXJhdG9yIiwNCiAgICBkb21haW46ICJnaXRodWIuY29tIiwNCiAgICBpbWc6ICJodHRwczovL29wZW5ncmFwaC5naXRodWJhc3NldHMuY29tL2I0MTMyZDRjYmZmMTUxYzc5NGRjOTI2MjRhYTk1ZjY2NTRkMjA3ZTViZjk3MWYzYjU1NjJlMzI4YjA3MDRmMzAvQW5kcmVqR2FqZG9zL2xpbmstcHJldmlldy1nZW5lcmF0b3IiLA0KICAgIGZhdmljb246ICJodHRwczovL2dpdGh1Yi5jb20vZmF2aWNvbi5pY28iDQogIH0sDQogIHsNCiAgICB0aXRsZTogIlR3byBQb2ludGVyIGFuZCBTbGlkaW5nIFdpbmRvdyBQbGF5bGlzdCB8IExhbmd1YWdlIEluZGVwZW5kZW50IENvdXJzZSIsDQogICAgZGVzY3JpcHRpb246ICJJbiB0aGlzIHBsYXlsaXN0LCB5b3Ugd2lsbCBsZWFybiBhYm91dCAyIHBvaW50ZXJzIGFuZCBTbGlkaW5nIFdpbmRvdyBpbiBkZXB0aC4gWW91IHdpbGwgYWxzbyBmaW5kIG5vdGVzLCBhbmQgY29kZSBmb3IgeW91ciBzcGVjaWZpYyBsYW5ndWFnZS4gVGhlIGZvY3VzIGlzIHRvLi4uIiwNCiAgICBkb21haW46ICJ5b3V0dWJlLmNvbSIsDQogICAgaW1nOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85a2RIeHBseWw1SS9ocWRlZmF1bHQuanBnP3NxcD0tb2F5bXdFWENPQURFSTRDU0ZyeXE0cXBBd2tJQVJVQUFJaENHQUU9JnJzPUFPbjRDTENnWkI0aFhNVmJ4c2d1ckdFTm80QzRWQThlaFEmZGF5c19zaW5jZV9lcG9jaD0yMDAzMyIsDQogICAgZmF2aWNvbjogImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2Zhdmljb24uaWNvIg0KICB9LA0KICB7DQogICAgdGl0bGU6ICJ2MCBieSBWZXJjZWwiLA0KICAgIGRlc2NyaXB0aW9uOiAiQ2hhdCB3aXRoIHYwIGFub3RoZXIgdmVyc2lvbi4gR2VuZXJhdGUgVUkgd2l0aCBzaW1wbGUgdGV4dCBwcm9tcHRzLiBDb3B5LCBwYXN0ZSwgc2hpcC4iLA0KICAgIGRvbWFpbjogInYwLmRldiIsDQogICAgaW1nOiAiaHR0cHM6Ly92MGNoYXQudmVyY2VsLnNoL2NoYXQvYXBpL29nIiwNCiAgICBmYXZpY29uOiAiaHR0cHM6Ly92MC5kZXYvYXNzZXRzL2ljb24tbGlnaHQtMzJ4MzIucG5nIg0KICB9LA0KICB7DQogICAgdGl0bGU6ICJYIC8gPyIsDQogICAgZGVzY3JpcHRpb246ICJMb29rcyBsaWtlIHRoaXMgcGFnZSBkb2Vzbid0IGV4aXN0LiBIZXJlJ3MgYSBwaWN0dXJlIG9mIGEgcG9vZGxlIHNpdHRpbmcgaW4gYSBjaGFpciBmb3IgeW91ciB0cm91YmxlLiIsDQogICAgZG9tYWluOiAieC5jb20iLA0KICAgIGltZzogImh0dHBzOi8vYWJzLnR3aW1nLmNvbS9lcnJvcnMvRXJyb3JTdGF0ZV9Ob3RGb3VuZC5wbmciLA0KICAgIGZhdmljb246ICJodHRwczovL3guY29tL2Zhdmljb24uaWNvIg0KICB9DQpdDQoNCmNvbnN0IExpbmtQcmV2aWV3Q2FyZCA9ICh7IGRhdGEgfSkgPT4gKA0KICA8YSBocmVmPXtgaHR0cHM6Ly8ke2RhdGEuZG9tYWlufWB9IHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiIGNsYXNzTmFtZT17YGNhcmQgJHtkYXRhLmRvbWFpbi5zcGxpdCgnLicpWzBdfWB9Pg0KICAgIDxkaXYgY2xhc3NOYW1lPSJjYXJkLWltYWdlIj4NCiAgICAgIDxpbWcgc3JjPXtkYXRhLmltZ30gYWx0PSIiIGNsYXNzTmFtZT0ibWFpbi1pbWFnZSIgLz4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzTmFtZT0iY2FyZC1jb250ZW50Ij4NCiAgICAgIDxoMiBjbGFzc05hbWU9ImNhcmQtdGl0bGUiPntkYXRhLnRpdGxlfTwvaDI+DQogICAgICA8cCBjbGFzc05hbWU9ImNhcmQtZGVzY3JpcHRpb24iPntkYXRhLmRlc2NyaXB0aW9ufTwvcD4NCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJjYXJkLWRvbWFpbiI+DQogICAgICAgIDxpbWcgc3JjPXtkYXRhLmZhdmljb259IGFsdD0iIiBjbGFzc05hbWU9ImZhdmljb24iIC8+DQogICAgICAgIDxzcGFuPntkYXRhLmRvbWFpbn08L3NwYW4+DQogICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgPC9hPg0KKQ0KDQpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb21wb25lbnQoKSB7DQogIGNvbnN0IFtsaW5rRGF0YSwgc2V0TGlua0RhdGFdID0gdXNlU3RhdGUoaW5pdGlhbExpbmtEYXRhKQ0KICBjb25zdCBbaW5wdXRVcmwsIHNldElucHV0VXJsXSA9IHVzZVN0YXRlKCcnKQ0KICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpDQogIGNvbnN0IFt0b2FzdCwgc2V0VG9hc3RdID0gdXNlU3RhdGUoeyBzaG93OiBmYWxzZSwgbWVzc2FnZTogJycsIHR5cGU6ICcnIH0pDQoNCiAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGUpID0+IHsNCiAgICBlLnByZXZlbnREZWZhdWx0KCkNCiAgICBpZiAoaW5wdXRVcmwpIHsNCiAgICAgIHNldElzTG9hZGluZyh0cnVlKQ0KICAgICAgdHJ5IHsNCiAgICAgICAgLy8gU2ltdWxhdGluZyBBUEkgY2FsbA0KICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpDQogICAgICAgIGNvbnN0IG5ld0NhcmQgPSB7DQogICAgICAgICAgdGl0bGU6ICJOZXcgTGluayIsDQogICAgICAgICAgZGVzY3JpcHRpb246ICJUaGlzIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgbmV3IGxpbmsgcHJldmlldy4iLA0KICAgICAgICAgIGRvbWFpbjogbmV3IFVSTChpbnB1dFVybCkuaG9zdG5hbWUsDQogICAgICAgICAgaW1nOiAiaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzMwMHgyMDAiLA0KICAgICAgICAgIGZhdmljb246ICJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTZ4MTYiDQogICAgICAgIH0NCiAgICAgICAgc2V0TGlua0RhdGEoW25ld0NhcmQsIC4uLmxpbmtEYXRhXSkNCiAgICAgICAgc2V0SW5wdXRVcmwoJycpDQogICAgICAgIHNob3dUb2FzdCgnTGluayBhZGRlZCBzdWNjZXNzZnVsbHkhJywgJ3N1Y2Nlc3MnKQ0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgc2hvd1RvYXN0KCdGYWlsZWQgdG8gYWRkIGxpbmsuIFBsZWFzZSB0cnkgYWdhaW4uJywgJ2Vycm9yJykNCiAgICAgIH0gZmluYWxseSB7DQogICAgICAgIHNldElzTG9hZGluZyhmYWxzZSkNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBjb25zdCBzaG93VG9hc3QgPSAobWVzc2FnZSwgdHlwZSkgPT4gew0KICAgIHNldFRvYXN0KHsgc2hvdzogdHJ1ZSwgbWVzc2FnZSwgdHlwZSB9KQ0KICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0VG9hc3QoeyBzaG93OiBmYWxzZSwgbWVzc2FnZTogJycsIHR5cGU6ICcnIH0pLCAzMDAwKQ0KICB9DQoNCiAgcmV0dXJuICgNCiAgICA8ZGl2IGNsYXNzTmFtZT0iY29udGFpbmVyIj4NCiAgICAgIDxoMSBjbGFzc05hbWU9ImhlYWRpbmciPkJvb2tleTwvaDE+DQogICAgICA8ZGl2IGNsYXNzTmFtZT0iYmVudG8tZ3JpZCI+DQogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJpbnB1dC1jYXJkIj4NCiAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT4NCiAgICAgICAgICAgIDxpbnB1dA0KICAgICAgICAgICAgICB0eXBlPSJ1cmwiDQogICAgICAgICAgICAgIHZhbHVlPXtpbnB1dFVybH0NCiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRJbnB1dFVybChlLnRhcmdldC52YWx1ZSl9DQogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciBhIFVSTCB0byBwcmV2aWV3Li4uIg0KICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICBjbGFzc05hbWU9InVybC1pbnB1dCINCiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZ30NCiAgICAgICAgICAgIC8+DQogICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3NOYW1lPSJhZGQtYnV0dG9uIiBkaXNhYmxlZD17aXNMb2FkaW5nfT4NCiAgICAgICAgICAgICAge2lzTG9hZGluZyA/IDxkaXYgY2xhc3NOYW1lPSJsb2FkZXIiPjwvZGl2PiA6ICdBZGQnfQ0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgPC9mb3JtPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAge2xpbmtEYXRhLm1hcCgoZGF0YSwgaW5kZXgpID0+ICgNCiAgICAgICAgICA8TGlua1ByZXZpZXdDYXJkIGtleT17aW5kZXh9IGRhdGE9e2RhdGF9IC8+DQogICAgICAgICkpfQ0KICAgICAgPC9kaXY+DQogICAgICB7dG9hc3Quc2hvdyAmJiAoDQogICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgdG9hc3QgJHt0b2FzdC50eXBlfWB9Pg0KICAgICAgICAgIHt0b2FzdC5tZXNzYWdlfQ0KICAgICAgICA8L2Rpdj4NCiAgICAgICl9DQogICAgICA8c3R5bGUganN4IGdsb2JhbD57YA0KICAgICAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOndnaHRANDAwOzYwMDs3MDAmZGlzcGxheT1zd2FwJyk7DQoNCiAgICAgICAgOnJvb3Qgew0KICAgICAgICAgIC0tYmctY29sb3I6ICNmOGY5ZmE7DQogICAgICAgICAgLS10ZXh0LWNvbG9yOiAjMzMzOw0KICAgICAgICAgIC0tY2FyZC1iZzogI2ZmZmZmZjsNCiAgICAgICAgICAtLWlucHV0LWJnOiAjMWExYTFhOw0KICAgICAgICAgIC0taW5wdXQtdGV4dDogI2ZmZmZmZjsNCiAgICAgICAgICAtLWlucHV0LXBsYWNlaG9sZGVyOiAjODg4ODg4Ow0KICAgICAgICAgIC0tYnV0dG9uLWJnOiAjNGE0YTRhOw0KICAgICAgICAgIC0tYnV0dG9uLXRleHQ6ICNmZmZmZmY7DQogICAgICAgICAgLS1saW5rZWRpbi1jb2xvcjogIzAwNzdiNTsNCiAgICAgICAgICAtLWdpdGh1Yi1jb2xvcjogIzI0MjkyZTsNCiAgICAgICAgICAtLXlvdXR1YmUtY29sb3I6ICNmZjAwMDA7DQogICAgICAgICAgLS1nb29nbGUtY29sb3I6ICM0Mjg1ZjQ7DQogICAgICAgICAgLS10d2l0dGVyLWNvbG9yOiAjMWRhMWYyOw0KICAgICAgICAgIC0tdmVyY2VsLWNvbG9yOiAjMDAwMDAwOw0KICAgICAgICAgIC0tc3VjY2Vzcy1jb2xvcjogIzI4YTc0NTsNCiAgICAgICAgICAtLWVycm9yLWNvbG9yOiAjZGMzNTQ1Ow0KICAgICAgICB9DQoNCiAgICAgICAgYm9keSB7DQogICAgICAgICAgZm9udC1mYW1pbHk6ICdQb3BwaW5zJywgc2Fucy1zZXJpZjsNCiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1jb2xvcik7DQogICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpOw0KICAgICAgICAgIG1hcmdpbjogMDsNCiAgICAgICAgICBwYWRkaW5nOiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgLmNvbnRhaW5lciB7DQogICAgICAgICAgbWF4LXdpZHRoOiAxMjAwcHg7DQogICAgICAgICAgbWFyZ2luOiAwIGF1dG87DQogICAgICAgICAgcGFkZGluZzogNDBweCAyMHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmhlYWRpbmcgew0KICAgICAgICAgIGZvbnQtc2l6ZTogNHJlbTsNCiAgICAgICAgICBmb250LXdlaWdodDogNzAwOw0KICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtOw0KICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg0NWRlZywgI2ZmNmI2YiwgIzRlY2RjNCwgIzQ1YjdkMSk7DQogICAgICAgICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7DQogICAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50Ow0KICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgICAgICAgbGVmdDogNTAlOw0KICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTsNCiAgICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7DQogICAgICAgIH0NCg0KICAgICAgICAuaGVhZGluZzo6YmVmb3JlIHsNCiAgICAgICAgICBjb250ZW50OiAnJzsNCiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgdG9wOiAwOw0KICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgcmlnaHQ6IDA7DQogICAgICAgICAgYm90dG9tOiAwOw0KICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg0NWRlZywgI2ZmNmI2YjMzLCAjNGVjZGM0MzMsICM0NWI3ZDEzMyk7DQogICAgICAgICAgZmlsdGVyOiBibHVyKDEwcHgpOw0KICAgICAgICAgIHotaW5kZXg6IC0xOw0KICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7DQogICAgICAgIH0NCg0KICAgICAgICAuYmVudG8tZ3JpZCB7DQogICAgICAgICAgZGlzcGxheTogZ3JpZDsNCiAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzMDBweCwgMWZyKSk7DQogICAgICAgICAgZ2FwOiAyMHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmlucHV0LWNhcmQgew0KICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWlucHV0LWJnKTsNCiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4Ow0KICAgICAgICAgIHBhZGRpbmc6IDIwcHg7DQogICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTsNCiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5pbnB1dC1jYXJkOjpiZWZvcmUgew0KICAgICAgICAgIGNvbnRlbnQ6ICcnOw0KICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICB0b3A6IC0ycHg7DQogICAgICAgICAgbGVmdDogLTJweDsNCiAgICAgICAgICByaWdodDogLTJweDsNCiAgICAgICAgICBib3R0b206IC0ycHg7DQogICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjZmY2YjZiLCAjNGVjZGM0LCAjNDViN2QxKTsNCiAgICAgICAgICB6LWluZGV4OiAtMTsNCiAgICAgICAgICBmaWx0ZXI6IGJsdXIoNXB4KTsNCiAgICAgICAgICBvcGFjaXR5OiAwLjU7DQogICAgICAgIH0NCg0KICAgICAgICAudXJsLWlucHV0IHsNCiAgICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgICBwYWRkaW5nOiAxMnB4Ow0KICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsNCiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7DQogICAgICAgICAgYm9yZGVyOiBub25lOw0KICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICAgICAgICBjb2xvcjogdmFyKC0taW5wdXQtdGV4dCk7DQogICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC51cmwtaW5wdXQ6OnBsYWNlaG9sZGVyIHsNCiAgICAgICAgICBjb2xvcjogdmFyKC0taW5wdXQtcGxhY2Vob2xkZXIpOw0KICAgICAgICB9DQoNCiAgICAgICAgLmFkZC1idXR0b24gew0KICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICBib3R0b206IDIwcHg7DQogICAgICAgICAgcmlnaHQ6IDIwcHg7DQogICAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7DQogICAgICAgICAgZm9udC1zaXplOiAxNHB4Ow0KICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJ1dHRvbi1iZyk7DQogICAgICAgICAgY29sb3I6IHZhcigtLWJ1dHRvbi10ZXh0KTsNCiAgICAgICAgICBib3JkZXI6IG5vbmU7DQogICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZTsNCiAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgICAgICAgbWluLXdpZHRoOiA4MHB4Ow0KICAgICAgICAgIG1pbi1oZWlnaHQ6IDM2cHg7DQogICAgICAgIH0NCg0KICAgICAgICAuYWRkLWJ1dHRvbjpob3Zlcjpub3QoOmRpc2FibGVkKSB7DQogICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzY2NjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5hZGQtYnV0dG9uOmRpc2FibGVkIHsNCiAgICAgICAgICBvcGFjaXR5OiAwLjc7DQogICAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5sb2FkZXIgew0KICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNmM2YzZjM7DQogICAgICAgICAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICMzNDk4ZGI7DQogICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOw0KICAgICAgICAgIHdpZHRoOiAyMHB4Ow0KICAgICAgICAgIGhlaWdodDogMjBweDsNCiAgICAgICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlOw0KICAgICAgICB9DQoNCiAgICAgICAgQGtleWZyYW1lcyBzcGluIHsNCiAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9DQogICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH0NCiAgICAgICAgfQ0KDQogICAgICAgIC5jYXJkIHsNCiAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY2FyZC1iZyk7DQogICAgICAgICAgYm9yZGVyLXJhZGl1czogMTVweDsNCiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCiAgICAgICAgICBjb2xvcjogaW5oZXJpdDsNCiAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpOw0KICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UsIGJveC1zaGFkb3cgMC4zcyBlYXNlOw0KICAgICAgICB9DQoNCiAgICAgICAgLmNhcmQ6aG92ZXIgew0KICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTsNCiAgICAgICAgICBib3gtc2hhZG93OiAwIDZweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7DQogICAgICAgIH0NCg0KICAgICAgICAuY2FyZC1pbWFnZSB7DQogICAgICAgICAgaGVpZ2h0OiAyMDBweDsNCiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB9DQoNCiAgICAgICAgLm1haW4taW1hZ2Ugew0KICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jYXJkLWNvbnRlbnQgew0KICAgICAgICAgIHBhZGRpbmc6IDIwcHg7DQogICAgICAgICAgZmxleC1ncm93OiAxOw0KICAgICAgICAgIGRpc3BsYXk6IGZsZXg7DQogICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jYXJkLXRpdGxlIHsNCiAgICAgICAgICBmb250LXNpemU6IDE4cHg7DQogICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsNCiAgICAgICAgICBtYXJnaW46IDAgMCAxMnB4IDA7DQogICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3g7DQogICAgICAgICAgLXdlYmtpdC1saW5lLWNsYW1wOiAyOw0KICAgICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7DQogICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jYXJkLWRlc2NyaXB0aW9uIHsNCiAgICAgICAgICBmb250LXNpemU6IDE0cHg7DQogICAgICAgICAgbWFyZ2luOiAwIDAgMTJweCAwOw0KICAgICAgICAgIGZsZXgtZ3JvdzogMTsNCiAgICAgICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDsNCiAgICAgICAgICAtd2Via2l0LWxpbmUtY2xhbXA6IDM7DQogICAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDsNCiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICAgIGNvbG9yOiAjNjY2Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmNhcmQtZG9tYWluIHsNCiAgICAgICAgICBkaXNwbGF5OiBmbGV4Ow0KICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgICAgZm9udC1zaXplOiAxMnB4Ow0KICAgICAgICAgIGNvbG9yOiAjOTk5Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmZhdmljb24gew0KICAgICAgICAgIHdpZHRoOiAxNnB4Ow0KICAgICAgICAgIGhlaWdodDogMTZweDsNCiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC50b2FzdCB7DQogICAgICAgICAgcG9zaXRpb246IGZpeGVkOw0KICAgICAgICAgIGJvdHRvbTogMjBweDsNCiAgICAgICAgICByaWdodDogMjBweDsNCiAgICAgICAgICBwYWRkaW5nOiAxMnB4IDIwcHg7DQogICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICAgICAgICAgIGNvbG9yOiAjZmZmOw0KICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsNCiAgICAgICAgICBmb250LXdlaWdodDogNjAwOw0KICAgICAgICAgIG9wYWNpdHk6IDA7DQogICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDIwcHgpOw0KICAgICAgICAgIGFuaW1hdGlvbjogZmFkZUluVXAgMC4zcyBlYXNlIGZvcndhcmRzLCBmYWRlT3V0IDAuM3MgZWFzZSAyLjdzIGZvcndhcmRzOw0KICAgICAgICB9DQoNCiAgICAgICAgLnRvYXN0LnN1Y2Nlc3Mgew0KICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXN1Y2Nlc3MtY29sb3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgLnRvYXN0LmVycm9yIHsNCiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7DQogICAgICAgIH0NCg0KICAgICAgICBAa2V5ZnJhbWVzIGZhZGVJblVwIHsNCiAgICAgICAgICB0byB7DQogICAgICAgICAgICBvcGFjaXR5OiAxOw0KICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEBrZXlmcmFtZXMgZmFkZU91dCB7DQogICAgICAgICAgdG8gew0KICAgICAgICAgICAgb3BhY2l0eTogMDsNCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvKiBEb21haW4tc3BlY2lmaWMgc3R5bGVzICovDQogICAgICAgIC5saW5rZWRpbiB7IGJvcmRlci1sZWZ0OiA0cHggc29saWQgdmFyKC0tbGlua2VkaW4tY29sb3IpOyB9DQogICAgICAgIC5naXRodWIgeyBib3JkZXItbGVmdDogNHB4IHNvbGlkIHZhcigtLWdpdGh1Yi1jb2xvcik7IH0NCiAgICAgICAgLnlvdXR1YmUgeyBib3JkZXItbGVmdDogNHB4IHNvbGlkIHZhcigtLXlvdXR1YmUtY29sb3IpOyB9DQogICAgICAgIC5kb2NzIHsgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1nb29nbGUtY29sb3IpOyB9DQogICAgICAgIC54IHsgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS10d2l0dGVyLWNvbG9yKTsgfQ0KICAgICAgICAudjAgeyBib3JkZXItbGVmdDogNHB4IHNvbGlkIHZhcigtLXZlcmNlbC1jb2xvcik7IH0NCg0KICAgICAgICAvKiBSZXNwb25zaXZlIGFkanVzdG1lbnRzICovDQogICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgew0KICAgICAgICAgIC5oZWFkaW5nIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogM3JlbTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICAuYmVudG8tZ3JpZCB7DQogICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyNTBweCwgMWZyKSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7DQogICAgICAgICAgLmhlYWRpbmcgew0KICAgICAgICAgICAgZm9udC1zaXplOiAyLjVyZW07DQogICAgICAgICAgfQ0KDQogICAgICAgICAgLmJlbnRvLWdyaWQgew0KICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICBgfTwvc3R5bGU+DQogICAgPC9kaXY+DQogICkNCn0=
`;

// Step 2: Decode the Base64 string
const decodedCode = Buffer.from(encodedString.trim(), "base64").toString("utf-8");

// Step 3: Print the decoded code
console.log("Decoded Code:");
console.log(decodedCode);

// Optionally, save the decoded code to a file
const fs = require("fs");
fs.writeFileSync("component.jsx", decodedCode, "utf-8");
console.log("Decoded code saved to 'component.jsx'.");
